package me.benzplayz;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import net.md_5.bungee.api.ChatColor;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.plugin.PluginDescription;
import net.md_5.bungee.api.plugin.PluginManager;
import net.md_5.bungee.api.scheduler.TaskScheduler;
import net.md_5.bungee.config.Configuration;
import net.md_5.bungee.config.ConfigurationProvider;
import net.md_5.bungee.config.YamlConfiguration;

public class Main
  extends Plugin
{
  public static Main instance;
  public static MySQL mysql;
  public String host;
  public Integer port;
  public String database;
  public String username;
  public String password;
  public static String lastReset;
  public static List<String> disabledservers = new ArrayList();
  public static ConfigurationProvider cp = ConfigurationProvider.getProvider(YamlConfiguration.class);
  public static HashMap<UUID, Integer> playertimes = new HashMap();
  public static String noPermission;
  public static String playerNotFound;
  public static String onlineTime;
  
  public void onEnable()
  {
    instance = this;
    
    createDirectory();
    createConfig();
    loadConfig();
    
    mysql = new MySQL(this.host, this.port, this.database, this.username, this.password, getDescription().getName());
    if (mysql.isConnected().booleanValue())
    {
      mysql.create("CREATE TABLE IF NOT EXISTS JartexOnlineTime (Player VARCHAR(16), UUID VARCHAR(36), OnlineTime INT);");
      getProxy().getPluginManager().registerCommand(this, new OnlineTimeCommand());
      getProxy().getPluginManager().registerListener(this, new OnlineTimeEvent());
      startCounter();
    }
    else
    {
      System.out.println("Could not connect to database. Disabling plugin..");
      return;
    }
  }
  
  public void createDirectory()
  {
    File dir = new File(getDataFolder(), "");
    if (!dir.exists()) {
      dir.mkdir();
    }
  }
  
  public void createConfig()
  {
    try
    {
      File file = new File(getDataFolder(), "config.yml");
      if (!file.exists())
      {
        file.createNewFile();
        Configuration cfg = cp.load(file);
        
        cfg.set("lastReset", Core.getDate());
        
        cfg.set("MySQL.host", "localhost");
        cfg.set("MySQL.port", Integer.valueOf(3306));
        cfg.set("MySQL.database", "minecraft");
        cfg.set("MySQL.username", "player");
        cfg.set("MySQL.password", "abc123");
        
        cfg.set("Settings.disabledServers", new ArrayList(Arrays.asList(new String[] { "dev", "testserver" })));
        
        cfg.set("Language.noPermission", "&e&lJartex&6&lNetwork &8> &eYou do not have access to this command.");
        cfg.set("Language.playerNotFound", "&e&lJartex&6&lNetwork &8> &6%PLAYER% &edoes not exist.");
        cfg.set("Language.onlineTime", "&e&lJartex&6&lNetwork &8> &eSince &6%DATE%, &6%PLAYER% &ehas been online for &6%HOURS% &ehours and &6%MINUTES% &eminutes.");
        
        cp.save(cfg, file);
      }
    }
    catch (IOException e)
    {
      e.printStackTrace();
    }
  }
  
  public void loadConfig()
  {
    try
    {
      File file = new File(getDataFolder(), "config.yml");
      Configuration cfg = cp.load(file);
      
      lastReset = cfg.getString("lastReset");
      
      this.host = cfg.getString("MySQL.host");
      this.port = Integer.valueOf(cfg.getInt("MySQL.port"));
      this.database = cfg.getString("MySQL.database");
      this.username = cfg.getString("MySQL.username");
      this.password = cfg.getString("MySQL.password");
      
      disabledservers = cfg.getStringList("Settings.disabledServers");
      
      noPermission = ChatColor.translateAlternateColorCodes('&', cfg.getString("Language.noPermission"));
      playerNotFound = ChatColor.translateAlternateColorCodes('&', cfg.getString("Language.playerNotFound"));
      onlineTime = ChatColor.translateAlternateColorCodes('&', cfg.getString("Language.onlineTime"));
    }
    catch (IOException e)
    {
      e.printStackTrace();
    }
  }
  
  public void startCounter()
  {
    getProxy().getScheduler().schedule(this, new Runnable()
    {
      public void run()
      {
        if (Main.this.getProxy().getPlayers().size() > 0) {
          Core.savePlayerTimes();
        }
      }
    }, 1L, 1L, TimeUnit.MINUTES);
  }
}
